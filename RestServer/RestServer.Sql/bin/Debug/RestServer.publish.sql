/*
Deployment script for RestServer

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "RestServer"
:setvar DefaultFilePrefix "RestServer"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[CityBasedPublicGroup]...';


GO
CREATE TABLE [dbo].[CityBasedPublicGroup] (
    [CityBasedPublicGroupId]   INT           IDENTITY (1, 1) NOT NULL,
    [CityId]                   INT           NOT NULL,
    [PublicGroupId]            INT           NOT NULL,
    [CreatedBy]                VARCHAR (50)  NOT NULL,
    [CreationDateTime]         DATETIME2 (7) NOT NULL,
    [LastModifiedBy]           VARCHAR (50)  NULL,
    [LastModificationDateTime] DATETIME2 (7) NULL,
    CONSTRAINT [PK_dbo.CityBasedPublicGroup] PRIMARY KEY CLUSTERED ([CityBasedPublicGroupId] ASC),
    CONSTRAINT [UK_CityBasedPublicGroup] UNIQUE NONCLUSTERED ([CityId] ASC, [PublicGroupId] ASC)
);


GO
PRINT N'Creating [dbo].[CountryBasedPublicGroup]...';


GO
CREATE TABLE [dbo].[CountryBasedPublicGroup] (
    [CountryBasedPublicGroupId] INT           IDENTITY (1, 1) NOT NULL,
    [CountryId]                 INT           NOT NULL,
    [PublicGroupId]             INT           NOT NULL,
    [CreatedBy]                 VARCHAR (50)  NOT NULL,
    [CreationDateTime]          DATETIME2 (7) NOT NULL,
    [LastModifiedBy]            VARCHAR (50)  NULL,
    [LastModificationDateTime]  DATETIME2 (7) NULL,
    CONSTRAINT [PK_dbo.CountryBasedPublicGroup] PRIMARY KEY CLUSTERED ([CountryBasedPublicGroupId] ASC),
    CONSTRAINT [UK_CountryBasedPublicGroup] UNIQUE NONCLUSTERED ([CountryId] ASC, [PublicGroupId] ASC)
);


GO
PRINT N'Creating [dbo].[EmergencyLocation]...';


GO
CREATE TABLE [dbo].[EmergencyLocation] (
    [EmergencyLocationId]      INT           IDENTITY (1, 1) NOT NULL,
    [LatitudeEncrypted]        VARCHAR (50)  NOT NULL,
    [LongitudeEncrypted]       VARCHAR (50)  NOT NULL,
    [SpeedEncrypted]           VARCHAR (50)  NULL,
    [EmergencySessionId]       INT           NOT NULL,
    [SameLocationReportCount]  INT           NOT NULL,
    [CreatedBy]                VARCHAR (50)  NOT NULL,
    [CreationDateTime]         DATETIME2 (7) NOT NULL,
    [LastModifiedBy]           VARCHAR (50)  NULL,
    [LastModificationDateTime] DATETIME2 (7) NULL,
    CONSTRAINT [PK_dbo.EmergencyLocation] PRIMARY KEY CLUSTERED ([EmergencyLocationId] ASC)
);


GO
PRINT N'Creating [dbo].[EmergencySession]...';


GO
CREATE TABLE [dbo].[EmergencySession] (
    [EmergencySessionId]           INT           IDENTITY (1, 1) NOT NULL,
    [Title]                        VARCHAR (50)  NOT NULL,
    [ExpiryDateTime]               DATETIME2 (7) NOT NULL,
    [FirstNotifiedAdminUserId]     INT           NULL,
    [FirstNotifiedDateTime]        DATETIME2 (7) NULL,
    [EmergencyTargetUserId]        INT           NOT NULL,
    [IsEmergencyRequestInProgress] BIT           NOT NULL,
    [CreatedBy]                    VARCHAR (50)  NOT NULL,
    [CreationDateTime]             DATETIME2 (7) NOT NULL,
    [RequestDateTime]              DATETIME2 (7) NULL,
    [StoppedBy]                    VARCHAR (50)  NULL,
    [StopDateTime]                 DATETIME2 (7) NULL,
    [LastModifiedBy]               VARCHAR (50)  NULL,
    [LastModificationDateTime]     DATETIME2 (7) NULL,
    CONSTRAINT [PK_dbo.EmergencySession] PRIMARY KEY CLUSTERED ([EmergencySessionId] ASC)
);


GO
PRINT N'Creating [dbo].[EmergencySessionExtension]...';


GO
CREATE TABLE [dbo].[EmergencySessionExtension] (
    [EmergencySessionExtensionId]  INT           IDENTITY (1, 1) NOT NULL,
    [EmergencySessionId]           INT           NOT NULL,
    [RequestDateTime]              DATETIME2 (7) NULL,
    [IsExtensionRequestInProgress] BIT           NOT NULL,
    [CreatedBy]                    VARCHAR (50)  NOT NULL,
    [CreationDateTime]             DATETIME2 (7) NOT NULL,
    [LastModifiedBy]               VARCHAR (50)  NULL,
    [LastModificationDateTime]     DATETIME2 (7) NULL,
    CONSTRAINT [PK_dbo.EmergencySessionExtension] PRIMARY KEY CLUSTERED ([EmergencySessionExtensionId] ASC)
);


GO
PRINT N'Creating [dbo].[EmergencySessionPublicGroupAccess]...';


GO
CREATE TABLE [dbo].[EmergencySessionPublicGroupAccess] (
    [EmergencySessionPublicGroupAccessId] INT           IDENTITY (1, 1) NOT NULL,
    [GroupId]                             INT           NOT NULL,
    [EmergencySessionId]                  INT           NOT NULL,
    [CreatedBy]                           VARCHAR (50)  NOT NULL,
    [CreationDateTime]                    DATETIME2 (7) NOT NULL,
    [LastModifiedBy]                      VARCHAR (50)  NULL,
    [LastModificationDateTime]            DATETIME2 (7) NULL,
    CONSTRAINT [PK_dbo.EmergencySessionPublicGroupAccess] PRIMARY KEY CLUSTERED ([EmergencySessionPublicGroupAccessId] ASC),
    CONSTRAINT [UK_EmergencySessionPublicGroupAccess] UNIQUE NONCLUSTERED ([EmergencySessionId] ASC, [GroupId] ASC)
);


GO
PRINT N'Creating [dbo].[EmergencySessionViewer]...';


GO
CREATE TABLE [dbo].[EmergencySessionViewer] (
    [EmergencySessionViewerId] INT           IDENTITY (1, 1) NOT NULL,
    [EmergencySessionId]       INT           NOT NULL,
    [GroupUserId]              INT           NOT NULL,
    [CreatedBy]                VARCHAR (50)  NOT NULL,
    [CreationDateTime]         DATETIME2 (7) NOT NULL,
    [LastModifiedBy]           VARCHAR (50)  NULL,
    [LastModificationDateTime] DATETIME2 (7) NULL,
    CONSTRAINT [PK_dbo.EmergencySessionViewer] PRIMARY KEY CLUSTERED ([EmergencySessionViewerId] ASC),
    CONSTRAINT [UK_EmergencySessionViewer] UNIQUE NONCLUSTERED ([EmergencySessionId] ASC, [GroupUserId] ASC)
);


GO
PRINT N'Creating [dbo].[Group]...';


GO
CREATE TABLE [dbo].[Group] (
    [GroupId]                  INT           IDENTITY (1, 1) NOT NULL,
    [GroupCategoryId]          INT           NOT NULL,
    [GroupName]                VARCHAR (50)  NOT NULL,
    [IsPublic]                 BIT           NOT NULL,
    [CreatedBy]                VARCHAR (50)  NOT NULL,
    [CreationDateTime]         DATETIME2 (7) NOT NULL,
    [LastModifiedBy]           VARCHAR (50)  NULL,
    [LastModificationDateTime] DATETIME2 (7) NULL,
    CONSTRAINT [PK_dbo.Group] PRIMARY KEY CLUSTERED ([GroupId] ASC)
);


GO
PRINT N'Creating [dbo].[GroupCategory]...';


GO
CREATE TABLE [dbo].[GroupCategory] (
    [GroupCategoryId]          INT           NOT NULL,
    [CategoryName]             VARCHAR (50)  NOT NULL,
    [CategoryDescription]      VARCHAR (500) NULL,
    [CreatedBy]                VARCHAR (50)  NOT NULL,
    [CreationDateTime]         DATETIME2 (7) NOT NULL,
    [LastModifiedBy]           VARCHAR (50)  NULL,
    [LastModificationDateTime] DATETIME2 (7) NULL,
    CONSTRAINT [PK_dbo.GroupCategory] PRIMARY KEY CLUSTERED ([GroupCategoryId] ASC),
    CONSTRAINT [UK_GroupCategory] UNIQUE NONCLUSTERED ([CategoryName] ASC)
);


GO
PRINT N'Creating [dbo].[GroupDevice]...';


GO
CREATE TABLE [dbo].[GroupDevice] (
    [GroupDeviceId]                                   INT           IDENTITY (1, 1) NOT NULL,
    [GroupId]                                         INT           NOT NULL,
    [DeviceId]                                        INT           NOT NULL,
    [IsAdministratorAllowedToTriggerEmergencySession] BIT           NOT NULL,
    [IsAdministratorAllowedToExtendEmergencySession]  BIT           NOT NULL,
    [CreatedBy]                                       VARCHAR (50)  NOT NULL,
    [CreationDateTime]                                DATETIME2 (7) NOT NULL,
    [LastModifiedBy]                                  VARCHAR (50)  NULL,
    [LastModificationDateTime]                        DATETIME2 (7) NULL,
    CONSTRAINT [PK_dbo.GroupDevice] PRIMARY KEY CLUSTERED ([GroupDeviceId] ASC),
    CONSTRAINT [UK_GroupDevice] UNIQUE NONCLUSTERED ([GroupId] ASC, [DeviceId] ASC)
);


GO
PRINT N'Creating [dbo].[GroupMember]...';


GO
CREATE TABLE [dbo].[GroupMember] (
    [GroupMemberId]                                   INT           IDENTITY (1, 1) NOT NULL,
    [GroupId]                                         INT           NOT NULL,
    [UserId]                                          INT           NOT NULL,
    [IsAdministratorAllowedToTriggerEmergencySession] BIT           NOT NULL,
    [IsAdministratorAllowedToExtendEmergencySession]  BIT           NOT NULL,
    [EmergencyNotificationModePreference]             INT           NOT NULL,
    [IsAdmin]                                         BIT           NOT NULL,
    [IsPrimary]                                       BIT           NOT NULL,
    [CreatedBy]                                       VARCHAR (50)  NOT NULL,
    [CreationDateTime]                                DATETIME2 (7) NOT NULL,
    [LastModifiedBy]                                  VARCHAR (50)  NULL,
    [LastModificationDateTime]                        DATETIME2 (7) NULL,
    CONSTRAINT [PK_dbo.GroupMember] PRIMARY KEY CLUSTERED ([GroupMemberId] ASC),
    CONSTRAINT [UK_GroupMember] UNIQUE NONCLUSTERED ([GroupId] ASC, [UserId] ASC)
);


GO
PRINT N'Creating [dbo].[LocalityBasedPublicGroup]...';


GO
CREATE TABLE [dbo].[LocalityBasedPublicGroup] (
    [LocalityBasedPublicGroupId] INT           IDENTITY (1, 1) NOT NULL,
    [LocalityId]                 INT           NOT NULL,
    [PublicGroupId]              INT           NOT NULL,
    [CreatedBy]                  VARCHAR (50)  NOT NULL,
    [CreationDateTime]           DATETIME2 (7) NOT NULL,
    [LastModifiedBy]             VARCHAR (50)  NULL,
    [LastModificationDateTime]   DATETIME2 (7) NULL,
    CONSTRAINT [PK_dbo.LocalityBasedPublicGroup] PRIMARY KEY CLUSTERED ([LocalityBasedPublicGroupId] ASC),
    CONSTRAINT [UK_LocalityBasedPublicGroup] UNIQUE NONCLUSTERED ([LocalityId] ASC, [PublicGroupId] ASC)
);


GO
PRINT N'Creating [dbo].[PublicGroup]...';


GO
CREATE TABLE [dbo].[PublicGroup] (
    [PublicGroupId]            INT           IDENTITY (1, 1) NOT NULL,
    [GroupId]                  INT           NOT NULL,
    [IsVerified]               BIT           NOT NULL,
    [VerifiedTitle]            VARCHAR (50)  NULL,
    [VerifiedDescription]      VARCHAR (50)  NULL,
    [CreatedBy]                VARCHAR (50)  NOT NULL,
    [CreationDateTime]         DATETIME2 (7) NOT NULL,
    [LastModifiedBy]           VARCHAR (50)  NULL,
    [LastModificationDateTime] DATETIME2 (7) NULL,
    CONSTRAINT [PK_dbo.PublicGroupMetadata] PRIMARY KEY CLUSTERED ([PublicGroupId] ASC)
);


GO
PRINT N'Creating [dbo].[StateBasedPublicGroup]...';


GO
CREATE TABLE [dbo].[StateBasedPublicGroup] (
    [StateBasedPublicGroupId]  INT           IDENTITY (1, 1) NOT NULL,
    [StateId]                  INT           NOT NULL,
    [PublicGroupId]            INT           NOT NULL,
    [CreatedBy]                VARCHAR (50)  NOT NULL,
    [CreationDateTime]         DATETIME2 (7) NOT NULL,
    [LastModifiedBy]           VARCHAR (50)  NULL,
    [LastModificationDateTime] DATETIME2 (7) NULL,
    CONSTRAINT [PK_dbo.StateBasedPublicGroup] PRIMARY KEY CLUSTERED ([StateBasedPublicGroupId] ASC),
    CONSTRAINT [UK_StateBasedPublicGroup] UNIQUE NONCLUSTERED ([StateId] ASC, [PublicGroupId] ASC)
);


GO
PRINT N'Creating [dbo].[SupplierDevice]...';


GO
CREATE TABLE [dbo].[SupplierDevice] (
    [DeviceId]                        INT           IDENTITY (1, 1) NOT NULL,
    [SupplierId]                      INT           NOT NULL,
    [DeviceCode]                      VARCHAR (50)  NOT NULL,
    [DeviceType]                      INT           NOT NULL,
    [DeviceRegistrationCodeEncrypted] VARCHAR (50)  NOT NULL,
    [CreatedBy]                       VARCHAR (50)  NOT NULL,
    [CreationDateTime]                DATETIME2 (7) NOT NULL,
    [LastModifiedBy]                  VARCHAR (50)  NULL,
    [LastModificationDateTime]        DATETIME2 (7) NULL,
    CONSTRAINT [PK_dbo.SupplierDevice] PRIMARY KEY CLUSTERED ([DeviceId] ASC),
    CONSTRAINT [UK_SupplierDevice] UNIQUE NONCLUSTERED ([DeviceCode] ASC)
);


GO
PRINT N'Creating [dbo].[User]...';


GO
CREATE TABLE [dbo].[User] (
    [UserId]                   INT           IDENTITY (1, 1) NOT NULL,
    [UserUniqueId]             VARCHAR (50)  NOT NULL,
    [PhoneNumber]              VARCHAR (50)  NOT NULL,
    [Email]                    VARCHAR (50)  NOT NULL,
    [EncryptedPassword]        VARCHAR (50)  NOT NULL,
    [UserStateId]              INT           NOT NULL,
    [CreatedBy]                VARCHAR (50)  NOT NULL,
    [CreationDateTime]         DATETIME2 (7) NOT NULL,
    [LastModifiedBy]           VARCHAR (50)  NULL,
    [LastModificationDateTime] DATETIME2 (7) NULL,
    CONSTRAINT [PK_dbo.User] PRIMARY KEY CLUSTERED ([UserId] ASC),
    CONSTRAINT [UK_UserPhone] UNIQUE NONCLUSTERED ([PhoneNumber] ASC),
    CONSTRAINT [UK_UserUniqueId] UNIQUE NONCLUSTERED ([UserUniqueId] ASC)
);


GO
PRINT N'Creating [dbo].[UserActivation]...';


GO
CREATE TABLE [dbo].[UserActivation] (
    [UserId]                              INT           NOT NULL,
    [ActivationCode]                      INT           NOT NULL,
    [TotalActivationAttemptCount]         INT           NOT NULL,
    [CurrentWindowActivationAttemptCount] INT           NOT NULL,
    [NextActivationWindowStartDateTime]   DATETIME2 (7) NOT NULL,
    [UserActivationExpiryDateTime]        DATETIME2 (7) NOT NULL,
    [CreationDateTime]                    DATETIME2 (7) NOT NULL,
    [LastModifiedBy]                      VARCHAR (50)  NULL,
    [LastModificationDateTime]            DATETIME2 (7) NULL,
    CONSTRAINT [PK_dbo.UserActivation] PRIMARY KEY CLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating [dbo].[UserDevice]...';


GO
CREATE TABLE [dbo].[UserDevice] (
    [UserDeviceId]             INT           IDENTITY (1, 1) NOT NULL,
    [UserId]                   INT           NOT NULL,
    [DeviceId]                 INT           NOT NULL,
    [DeviceFriendlyName]       VARCHAR (50)  NULL,
    [CreatedBy]                VARCHAR (50)  NOT NULL,
    [CreationDateTime]         DATETIME2 (7) NOT NULL,
    [LastModifiedBy]           VARCHAR (50)  NULL,
    [LastModificationDateTime] DATETIME2 (7) NULL,
    CONSTRAINT [PK_dbo.UserDevice] PRIMARY KEY CLUSTERED ([UserDeviceId] ASC),
    CONSTRAINT [UK_UserDevice] UNIQUE NONCLUSTERED ([UserId] ASC, [DeviceId] ASC)
);


GO
PRINT N'Creating [dbo].[UserSession]...';


GO
CREATE TABLE [dbo].[UserSession] (
    [UserSessionId]                INT           IDENTITY (1, 1) NOT NULL,
    [UserId]                       INT           NOT NULL,
    [RefreshToken]                 VARCHAR (50)  NOT NULL,
    [RefreshTokenCreationDateTime] DATETIME      NOT NULL,
    [CreatedBy]                    VARCHAR (50)  NOT NULL,
    [CreationDateTime]             DATETIME2 (7) NOT NULL,
    [LastModifiedBy]               VARCHAR (50)  NULL,
    [LastModificationDateTime]     DATETIME2 (7) NULL,
    CONSTRAINT [PK_dbo.UserSession] PRIMARY KEY CLUSTERED ([UserId] ASC),
    CONSTRAINT [UK_UserId] UNIQUE NONCLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating [dbo].[UserState]...';


GO
CREATE TABLE [dbo].[UserState] (
    [UserStateId]              INT           NOT NULL,
    [UserStateName]            VARCHAR (50)  NOT NULL,
    [CreatedBy]                VARCHAR (50)  NOT NULL,
    [CreationDateTime]         DATETIME2 (7) NOT NULL,
    [LastModifiedBy]           VARCHAR (50)  NULL,
    [LastModificationDateTime] DATETIME2 (7) NULL,
    CONSTRAINT [PK_dbo.UserState] PRIMARY KEY CLUSTERED ([UserStateId] ASC),
    CONSTRAINT [UK_UserStateName] UNIQUE NONCLUSTERED ([UserStateName] ASC)
);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a33a1801-a170-417d-ba28-c7ab24f1522d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a33a1801-a170-417d-ba28-c7ab24f1522d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f115aaf6-a93d-4cf4-b99c-335c90dcbce1')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f115aaf6-a93d-4cf4-b99c-335c90dcbce1')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9fa6aea8-abb0-4b71-87d8-cd167e544603')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9fa6aea8-abb0-4b71-87d8-cd167e544603')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6fbed8b3-65dc-461c-b05c-216941a69305')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6fbed8b3-65dc-461c-b05c-216941a69305')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f5573f32-75d2-4a4b-92e0-55a2dcef869c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f5573f32-75d2-4a4b-92e0-55a2dcef869c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0afa4574-d48d-4220-b8d2-4fbf8dd0a26c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0afa4574-d48d-4220-b8d2-4fbf8dd0a26c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '75a2b49c-9d42-4a45-a9e2-51cc289b935c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('75a2b49c-9d42-4a45-a9e2-51cc289b935c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ac1ed622-acca-4672-b187-8a325a5f98d0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ac1ed622-acca-4672-b187-8a325a5f98d0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6e35e4b9-005a-445d-8cdd-496767b2ee7e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6e35e4b9-005a-445d-8cdd-496767b2ee7e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '777228b9-784c-475b-9f9a-3a97484ce727')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('777228b9-784c-475b-9f9a-3a97484ce727')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '165b5eb4-c456-44f1-8c72-638370e1c99a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('165b5eb4-c456-44f1-8c72-638370e1c99a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'cdc7702f-4625-46fe-a123-48696fe20a16')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('cdc7702f-4625-46fe-a123-48696fe20a16')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8e7119fa-b1ca-4867-b4ab-aed2cb302202')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8e7119fa-b1ca-4867-b4ab-aed2cb302202')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2f3405eb-9459-41d1-a4d0-9c0268dc9aa5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2f3405eb-9459-41d1-a4d0-9c0268dc9aa5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b04e2bd3-3209-4452-a01c-1762e4cc2c33')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b04e2bd3-3209-4452-a01c-1762e4cc2c33')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '14b0c6b4-5fc9-4ca5-b539-45d117aebc7a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('14b0c6b4-5fc9-4ca5-b539-45d117aebc7a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1a78d207-6724-415d-94ee-3af3488aea44')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1a78d207-6724-415d-94ee-3af3488aea44')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'db5d6ad3-fac7-4191-b732-2b6e0021a313')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('db5d6ad3-fac7-4191-b732-2b6e0021a313')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '954c9144-193b-4158-b84d-e3e315b6475f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('954c9144-193b-4158-b84d-e3e315b6475f')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

SET IDENTITY_INSERT [dbo].[UnitOfMeasure] ON

IF NOT EXISTS (SELECT * FROM [dbo].[UserState] WHERE [UserStateId] = 1)
INSERT [dbo].[UserState] ([UserStateId], [UserStateName], [CreatedBy], [CreationDateTime]) 
	VALUES (1, 'VerificationPending', SUSER_SNAME(), GETUTCDATE())

IF NOT EXISTS (SELECT * FROM [dbo].[UserState] WHERE [UserStateId] = 2)
INSERT [dbo].[UserState] ([UserStateId], [UserStateName], [CreatedBy], [CreationDateTime]) 
	VALUES (2, 'MobileVerified', SUSER_SNAME(), GETUTCDATE())

IF NOT EXISTS (SELECT * FROM [dbo].[UserState] WHERE [UserStateId] = 3)
INSERT [dbo].[UserState] ([UserStateId], [UserStateName], [CreatedBy], [CreationDateTime]) 
	VALUES (3, 'MobileAndEmailVerified', SUSER_SNAME(), GETUTCDATE())

SET IDENTITY_INSERT [dbo].[UnitOfMeasure] OFF

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
