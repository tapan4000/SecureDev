<VisualMicro>
  <Program Name="bluetooth_with_arducam" Ext=".ino" Location="C:\Users\tapanj\Desktop\Sketches\Arduino_2MP\bluetooth_with_arducam">
    <Compile ReCompileIfSourceIsNewer="1" IsDebugStart="1" IsGdb="0" CompilerErrors="0" ConfigurationName="Debug" UseConfigurationNameInBuildFolder="True" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\tapanj\AppData\Local\Temp\VMBuilds\bluetooth_with_arducam\uno\Debug" SketchName="bluetooth_with_arducam" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 50;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE_CDCSerialClass 12;VM_DEBUGGER_TYPE_HARDWARESERIAL1 13;VM_DEBUGGER_TYPE_HARDWARESERIAL2 14;VM_DEBUGGER_TYPE_HARDWARESERIAL3 15;VM_DEBUGGER_TYPE_NET_UDP 16;VM_DEBUGGER_TYPE_USBAPI 17;VM_DEBUGGER_TYPE_SERIALUSB 18;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_HARDWARESERIAL;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="arduino16x" Package="arduino" Platform="avr" Architecture="avr">
      <Board Name="uno" Description="Arduino/Genuino Uno" CoreFolder="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" VariantFullPath="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\standard" McuIdePath="C:\Program Files (x86)\Arduino" McuSketchBookPath="C:\Users\tapanj\Documents\Arduino" name="Arduino/Genuino Uno" vid.0="0x2341" pid.0="0x0043" vid.1="0x2341" pid.1="0x0001" vid.2="0x2A03" pid.2="0x0043" vid.3="0x2341" pid.3="0x0243" upload.tool="avrdude" upload.protocol="arduino" upload.maximum_size="32256" upload.maximum_data_size="2048" upload.speed="115200" bootloader.tool="avrdude" bootloader.low_fuses="0xFF" bootloader.high_fuses="0xDE" bootloader.extended_fuses="0xFD" bootloader.unlock_bits="0x3F" bootloader.lock_bits="0x0F" bootloader.file="optiboot/optiboot_atmega328.hex" build.mcu="atmega328p" build.f_cpu="16000000L" build.board="AVR_UNO" build.core="arduino" build.variant="standard" runtime.ide.path="C:\Program Files (x86)\Arduino" runtime.os="windows" build.system.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\system" runtime.ide.version="10803" target_package="arduino" target_platform="avr" runtime.hardware.path="C:\Program Files (x86)\Arduino\hardware\arduino" originalid="uno" intellisense.tools.path="{runtime.tools.avr-gcc.path}\" intellisense.include.paths="{intellisense.tools.path}avr\include\;{intellisense.tools.path}avr\include\avr\;{intellisense.tools.path}lib\gcc\avr\4.8.1\include;{intellisense.tools.path}lib\gcc\avr\4.9.2\include;{intellisense.tools.path}lib\gcc\avr\4.9.3\include" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.erase.params.verbose="-v" tools.atprogram.erase.params.quiet="-q" tools.atprogram.bootloader.params.verbose="-v" tools.atprogram.bootloader.params.quiet="-q" tools.atprogram.bootloader.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {bootloader.verbose}  program -c -f &quot;{runtime.ide.path}\hardware\arduino\avr\bootloaders\{bootloader.file}&quot;" version="1.6.19" compiler.warning_flags="-w" compiler.warning_flags.none="-w" compiler.warning_flags.default="" compiler.warning_flags.more="-Wall" compiler.warning_flags.all="-Wall -Wextra" compiler.path="{runtime.tools.avr-gcc.path}/bin/" compiler.c.cmd="avr-gcc" compiler.c.flags="-c -g -Os {compiler.warning_flags} -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects" compiler.c.elf.flags="{compiler.warning_flags} -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections" compiler.c.elf.cmd="avr-gcc" compiler.S.flags="-c -g -x assembler-with-cpp -flto -MMD" compiler.cpp.cmd="avr-g++" compiler.cpp.flags="-c -g -Os {compiler.warning_flags} -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -MMD -flto" compiler.ar.cmd="avr-gcc-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="avr-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O ihex -R .eeprom" compiler.elf2hex.cmd="avr-objcopy" compiler.ldflags="" compiler.size.cmd="avr-size" build.extra_flags="" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.S.extra_flags="" compiler.cpp.extra_flags="" compiler.ar.extra_flags="" compiler.objcopy.eep.extra_flags="" compiler.elf2hex.extra_flags="" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.S.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" archive_file_path="{build.path}/{archive_file}" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{archive_file_path}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; {compiler.c.elf.flags} -mmcu={build.mcu} {compiler.c.elf.extra_flags} -o &quot;{build.path}/{build.project_name}.elf&quot; {object_files} &quot;{build.path}/{archive_file}&quot; &quot;-L{build.path}&quot; -lm" recipe.objcopy.eep.pattern="&quot;{compiler.path}{compiler.objcopy.cmd}&quot; {compiler.objcopy.eep.flags} {compiler.objcopy.eep.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.eep&quot;" recipe.objcopy.hex.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.hex&quot;" recipe.output.tmp_file="{build.project_name}.hex" recipe.output.save_file="{build.project_name}.{build.variant}.hex" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*" recipe.size.regex.data="^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*" recipe.size.regex.eeprom="^(?:\.eeprom)\s+([0-9]+).*" preproc.includes.flags="-w -x c++ -M -MG -MP" recipe.preproc.includes="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.includes.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot;" preproc.macros.flags="-w -x c++ -E -CC" recipe.preproc.macros="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.macros.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{preprocessed_file_path}&quot;" tools.avrdude.path="{runtime.tools.avrdude.path}" tools.avrdude.cmd.path="{path}/bin/avrdude" tools.avrdude.config.path="{path}/etc/avrdude.conf" tools.avrdude.network_cmd="{runtime.tools.arduinoOTA.path}/bin/arduinoOTA" tools.avrdude.upload.params.verbose="-v" tools.avrdude.upload.params.quiet="-q -q" tools.avrdude.upload.verify="" tools.avrdude.upload.params.noverify="-V" tools.avrdude.upload.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {upload.verbose} {upload.verify} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.program.params.verbose="-v" tools.avrdude.program.params.quiet="-q -q" tools.avrdude.program.verify="" tools.avrdude.program.params.noverify="-V" tools.avrdude.program.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {program.verbose} {program.verify} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.erase.params.verbose="-v" tools.avrdude.erase.params.quiet="-q -q" tools.avrdude.erase.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {erase.verbose} -p{build.mcu} -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m" tools.avrdude.bootloader.params.verbose="-v" tools.avrdude.bootloader.params.quiet="-q -q" tools.avrdude.bootloader.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {bootloader.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{runtime.platform.path}/bootloaders/{bootloader.file}:i&quot; -Ulock:w:{bootloader.lock_bits}:m" tools.avrdude_remote.upload.pattern="/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -p{build.mcu}" tools.avrdude.upload.network_pattern="&quot;{network_cmd}&quot; -address {serial.port} -port {upload.network.port} -sketch &quot;{build.path}/{build.project_name}.hex&quot; -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}" build.usb_manufacturer="&quot;Unknown&quot;" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" vm.platform.root.path="C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions\jt0pbsxw.3gj\Micro Platforms\arduino16x" avrisp.name="AVR ISP" avrisp.communication="serial" avrisp.protocol="stk500v1" avrisp.program.protocol="stk500v1" avrisp.program.tool="avrdude" avrisp.program.extra_params="-P{serial.port}" avrispmkii.name="AVRISP mkII" avrispmkii.communication="usb" avrispmkii.protocol="stk500v2" avrispmkii.program.protocol="stk500v2" avrispmkii.program.tool="avrdude" avrispmkii.program.extra_params="-Pusb" usbtinyisp.name="USBtinyISP" usbtinyisp.protocol="usbtiny" usbtinyisp.program.tool="avrdude" usbtinyisp.program.extra_params="" arduinoisp.name="ArduinoISP" arduinoisp.protocol="arduinoisp" arduinoisp.program.tool="avrdude" arduinoisp.program.extra_params="" arduinoisporg.name="ArduinoISP.org" arduinoisporg.protocol="arduinoisporg" arduinoisporg.program.tool="avrdude" arduinoisporg.program.extra_params="" usbasp.name="USBasp" usbasp.communication="usb" usbasp.protocol="usbasp" usbasp.program.protocol="usbasp" usbasp.program.tool="avrdude" usbasp.program.extra_params="-Pusb" parallel.name="Parallel Programmer" parallel.protocol="dapa" parallel.force="true" parallel.program.tool="avrdude" parallel.program.extra_params="-F" arduinoasisp.name="Arduino as ISP" arduinoasisp.communication="serial" arduinoasisp.protocol="stk500v1" arduinoasisp.speed="19200" arduinoasisp.program.protocol="stk500v1" arduinoasisp.program.speed="19200" arduinoasisp.program.tool="avrdude" arduinoasisp.program.extra_params="-P{serial.port} -b{program.speed}" usbGemma.name="Arduino Gemma" usbGemma.protocol="arduinogemma" usbGemma.program.tool="avrdude" usbGemma.program.extra_params="" usbGemma.config.path="{runtime.platform.path}/bootloaders/gemma/avrdude.conf" buspirate.name="BusPirate as ISP" buspirate.communication="serial" buspirate.protocol="buspirate" buspirate.program.protocol="buspirate" buspirate.program.tool="avrdude" buspirate.program.extra_params="-P{serial.port}" stk500.name="Atmel STK500 development board" stk500.communication="serial" stk500.protocol="stk500" stk500.program.protocol="stk500" stk500.program.tool="avrdude" stk500.program.extra_params="-P{serial.port}" jtag3isp.name="Atmel JTAGICE3 (ISP mode)" jtag3isp.communication="usb" jtag3isp.protocol="jtag3isp" jtag3isp.program.protocol="jtag3isp" jtag3isp.program.tool="avrdude" jtag3isp.program.extra_params="" jtag3.name="Atmel JTAGICE3 (JTAG mode)" jtag3.communication="usb" jtag3.protocol="jtag3" jtag3.program.protocol="jtag3" jtag3.program.tool="avrdude" jtag3.program.extra_params="-B0.1" atmel_ice.name="Atmel-ICE (AVR)" atmel_ice.communication="usb" atmel_ice.protocol="atmelice_isp" atmel_ice.program.protocol="atmelice_isp" atmel_ice.program.tool="avrdude" atmel_ice.program.extra_params="-Pusb" runtime.tools.avr-gcc.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avr-gcc-4.9.2-atmel3.5.4-arduino2.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.tools-avr.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avrdude.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avrdude-6.3.0-arduino9.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.arduinoOTA.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.arduinoOTA-1.1.1.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.vm.boardinfo.id="uno" runtime.vm.boardinfo.name="uno" runtime.vm.boardinfo.desc="Arduino/Genuino Uno" runtime.vm.boardinfo.src_location="C:\Program Files (x86)\Arduino\hardware\arduino\avr" ide.hint="Use installed IDE. Provides built-in hardware, reference/help and libraries." ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.revision_name="1.8.0" ide.default.version="10800" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="Arduino.h" ide.exe_name="arduino" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.builder.exe="arduinobuilder.exe" ide.builder.name="Arduino Builder" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" ide.help.reference.path="reference" ide.help.reference.path2="reference\www.arduino.cc\en\Reference" ide.help.reference.serial="reference\www.arduino.cc\en\Serial" ide.location.preferences.portable="{runtime.ide.path}\portable" ide.location.preferences.arduinoData="{runtime.sketchbook.path}\ArduinoData" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}\java\bin" ide.appid="arduino16x" location.sketchbook="C:\Users\tapanj\Documents\Arduino" build.core.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" build.core.parentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores" build.core.coresparentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr" build.core.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" vm.core.include="Arduino.h" vm.boardsource.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr" runtime.platform.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr" vm.platformname.name="avr" build.arch="AVR" builder.noino="false" build.architecture="avr" vmresolved.compiler.path="C:\Program Files (x86)\Arduino\hardware\tools\avr\bin\" vmresolved.tools.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" build.variant.vmresolved.name="standard" build.variant.vmresolved.full_path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\standard" build.path="C:\Users\tapanj\AppData\Local\Temp\VMBuilds\bluetooth_with_arducam\uno\Debug" build.project_name="bluetooth_with_arducam.ino" build.project_path="C:\Users\tapanj\Desktop\Sketches\Arduino_2MP\bluetooth_with_arducam" ProjectDir="C:\Users\tapanj\Desktop\Sketches\Arduino_2MP\bluetooth_with_arducam\" vm.runtime.compiler.showwarnings="false" vm.runtime.upload.verbose="false" vm.runtime.upload.verify="false" serial.port.file="COM4" serial.port="COM4" serial.port.num="4" serial.port.caption="COM4   - Arduino Uno" serial.Caption="Arduino Uno (COM4)" serial.ClassGuid="{4d36e978-e325-11ce-bfc1-08002be10318}" serial.CompatibleID.value0="USB\Class_02" serial.ConfigManagerErrorCode="0" serial.ConfigManagerUserConfig="False" serial.CreationClassName="Win32_PnPEntity" serial.Description="Arduino Uno" serial.DeviceID="USB\VID_2341&amp;PID_0001\856323332363518182A1" serial.HardwareID.value0="USB\VID_2341&amp;PID_0001" serial.Manufacturer="Arduino LLC (www.arduino.cc)" serial.Name="Arduino Uno (COM4)" serial.PNPClass="Ports" serial.PNPDeviceID="USB\VID_2341&amp;PID_0001\856323332363518182A1" serial.Present="True" serial.Service="usbser" serial.Status="OK" serial.SystemCreationClassName="Win32_ComputerSystem" serial.SystemName="TAPAN-HP" serial.vid="0x2341" serial.pid="0x0001" serial.iserial="856323332363518182A1" serial.port.iserial="856323332363518182A1" vm.runtime.compiler.auto_discover_includes="true" vm.runtime.compiler.auto_discover_includes_cache="true" build.vm.build.vmdebug="1" build.vm.build.isgdb="0" build.vm.build.optimised="1" vm.last.buildpath="C:\Users\tapanj\AppData\Local\Temp\VMBuilds\bluetooth_with_arducam\uno\Debug" />
    </Platform>
    <Debug EnableBreak="1" DebugEnabled="1" DebugMode="Full" RemotePortTransport="" InBreakLiveView="1" PerfStats="1" IsGdb="0" RemotePortSpeedWrittenToDebugSource="115200" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="bluetooth_with_arducam.ino, line 80" Id="5f725ebc-1b91-42b9-a074-edba979d3151" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\tapanj\desktop\sketches\arduino_2mp\bluetooth_with_arducam\bluetooth_with_arducam.ino" FileLine="80" FileColumn="1" FunctionName="setup()" FunctionLineOffset="15" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='5f725ebc-1b91-42b9-a074-edba979d3151'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>73	    Serial.println(F("Start Serial at 115200"));
74	  #else
75	    Wire.begin();
76	    Serial.begin(921600);
77	    Serial.println(F("Start Serial at 921600"));
78	  #endif
79	
--&gt;80	  Serial.println(F("ACK CMD ArduCAM Start!"));
81	
82	  pinMode(CS, OUTPUT);
83	  
84	  Serial.print(F("Initializing SD card"));
85	  
86	  if(!SD.begin(SD_CARD_Pin)){
87	    Serial.println(F("SD Initialization failed"));
88	    return;
89	  }
</Source>
      </BreakPoint>
      <BreakPoint Index="2" Name="bluetooth_with_arducam.ino, line 244" Id="4c103bda-05e1-4cc3-9dfc-e06857436a12" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\tapanj\desktop\sketches\arduino_2mp\bluetooth_with_arducam\bluetooth_with_arducam.ino" FileLine="244" FileColumn="1" FunctionName="loop()" FunctionLineOffset="65" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='4c103bda-05e1-4cc3-9dfc-e06857436a12'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>237	      case 0x10:
238	      /*mode = 1;
239	      temp = 0xff;
240	      start_capture = 1;
241	      Serial.println(F("ACK CMD CAM start single shoot."));*/
242	
243	      // This is an alternative path that can be invoked by pressing another button on the device or by pressing the buttons two times in 1 sec.
--&gt;244	      /*mode = 2;
245	      temp = 0xff;
246	      start_capture = 2;
247	      Serial.println(F("ACK CMD CAM start video streaming."));*/
248	
249		  Video2SD();
250	
251	      break;
252	      /*case 0x11: 
253	      temp = 0xff;
</Source>
      </BreakPoint>
      <BreakPoint Index="3" Name="bluetooth_with_arducam.ino, line 91" Id="97898970-7183-44af-adaf-069d6830198b" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\tapanj\desktop\sketches\arduino_2mp\bluetooth_with_arducam\bluetooth_with_arducam.ino" FileLine="91" FileColumn="1" FunctionName="setup()" FunctionLineOffset="26" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='97898970-7183-44af-adaf-069d6830198b'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>84	  Serial.print(F("Initializing SD card"));
85	  
86	  if(!SD.begin(SD_CARD_Pin)){
87	    Serial.println(F("SD Initialization failed"));
88	    return;
89	  }
90	  
--&gt;91	  Serial.println(F("SD Initialization complete"));
92	
93	 /* File testFile = SD.open("imgCtr.txt", FILE_WRITE);
94	  if(testFile){
95	    Serial.println("test file opened");
96	    testFile.close();
97	  }
98	  else{
99	    Serial.println("test file failed to open");
100	  }*/
</Source>
      </BreakPoint>
      <BreakPoint Index="4" Name="bluetooth_with_arducam.ino, line 803" Id="cfae9e93-cb57-43bc-8462-f9bcb20e222b" Enabled="1" Message="Received: {buf[0]}, {buf[1]}, {buf[2]}, {buf[3]}, {buf[4]}, {buf[5]}, {buf[6]}, {buf[7]}, {buf[8]}" MessageTextType="0" PreProcessedMessage="Received: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\tapanj\desktop\sketches\arduino_2mp\bluetooth_with_arducam\bluetooth_with_arducam.ino" FileLine="803" FileColumn="1" FunctionName="read_fifo_burst(ArduCAM myCAM, String fileName, bool isVideoClip)" FunctionLineOffset="138" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='cfae9e93-cb57-43bc-8462-f9bcb20e222b'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>796	        buf[i++] = temp;
797	      }
798	      else{
799	        // Write 256 bytes image data to file
800	        //Serial.write(outFile.size());
801	        myCAM.CS_HIGH();
802			
--&gt;803	        outFile.write(buf, 256);
804			
805	        i = 0;
806	        buf[i++] = temp;
807	        Serial.println(F("Writing 256 bytes"));
808	        myCAM.CS_LOW();
809	        myCAM.set_fifo_burst();
810	      }
811	    }
812	    else if ((temp == 0xD8) &amp; (temp_last == 0xFF)) // 216 and 255
</Source>
        <MessageVariables>
          <MessageVariable Name="buf[0]" Index="1" />
          <MessageVariable Name="buf[1]" Index="2" />
          <MessageVariable Name="buf[2]" Index="3" />
          <MessageVariable Name="buf[3]" Index="4" />
          <MessageVariable Name="buf[4]" Index="5" />
          <MessageVariable Name="buf[5]" Index="6" />
          <MessageVariable Name="buf[6]" Index="7" />
          <MessageVariable Name="buf[7]" Index="8" />
          <MessageVariable Name="buf[8]" Index="9" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="5" Name="bluetooth_with_arducam.ino, line 801" Id="b28599e3-cb4e-4030-9c53-296def7facda" Enabled="1" Message="{outFile.name()}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\tapanj\desktop\sketches\arduino_2mp\bluetooth_with_arducam\bluetooth_with_arducam.ino" FileLine="801" FileColumn="1" FunctionName="read_fifo_burst(ArduCAM myCAM, String fileName, bool isVideoClip)" FunctionLineOffset="136" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='b28599e3-cb4e-4030-9c53-296def7facda'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>794	      //Serial.write(temp);
795	      if(i &lt; 256){
796	        buf[i++] = temp;
797	      }
798	      else{
799	        // Write 256 bytes image data to file
800	        //Serial.write(outFile.size());
--&gt;801	        myCAM.CS_HIGH();
802			
803	        outFile.write(buf, 256);
804			
805	        i = 0;
806	        buf[i++] = temp;
807	        Serial.println(F("Writing 256 bytes"));
808	        myCAM.CS_LOW();
809	        myCAM.set_fifo_burst();
810	      }
</Source>
        <MessageVariables>
          <MessageVariable Name="outFile.name()" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="6" Name="bluetooth_with_arducam.ino, line 407" Id="d1fc82ec-fd26-4b93-9323-74c8572160f7" Enabled="1" Message="While loop: {millis() - timer}" MessageTextType="0" PreProcessedMessage="While loop: {0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\tapanj\desktop\sketches\arduino_2mp\bluetooth_with_arducam\bluetooth_with_arducam.ino" FileLine="407" FileColumn="1" FunctionName="loop()" FunctionLineOffset="225" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='d1fc82ec-fd26-4b93-9323-74c8572160f7'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>400	    String fileName = GetFileName(true);
401	    Serial.println(F("Printing time:"));
402	    unsigned long timer = millis();
403	    Serial.println(timer);
404	    Serial.println(videoInterval);
405	    Serial.println(millis());
406	    while (millis() - timer &lt; videoInterval)
--&gt;407	    {      
408	      Serial.println(F("Begin the timer"));
409	      /*temp = Serial.read();
410	      if (temp == 0x21)
411	      {
412	        start_capture = 0;
413	        mode = 0;
414	        Serial.println(F("ACK CMD CAM stop video streaming."));
415	        break;
416	      }
</Source>
        <MessageVariables>
          <MessageVariable Name="millis() - timer" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="7" Name="bluetooth_with_arducam.ino, line 904" Id="8cf87d66-8dab-48de-b269-2bf6d3f67306" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\tapanj\desktop\sketches\arduino_2mp\bluetooth_with_arducam\bluetooth_with_arducam.ino" FileLine="904" FileColumn="1" FunctionName="Video2SD()" FunctionLineOffset="10" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='8cf87d66-8dab-48de-b269-2bf6d3f67306'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>897		byte buf[256];
898		static int i = 0;
899		uint8_t temp = 0, temp_last = 0;
900		unsigned long position = 0;
901		uint16_t frame_cnt = 0;
902		uint8_t remnant = 0;
903		uint32_t length = 0;
--&gt;904		bool is_header = false;
905		String str = GetFileName(true);
906		//Open the new file
907		outFile = SD.open(str, O_WRITE | O_CREAT | O_TRUNC);
908		if (!outFile)
909		{
910			Serial.println(F("Video File open failed"));
911			while (1);
912			return;
913		}
</Source>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>